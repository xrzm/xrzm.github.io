<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kali上使用cobaltstrike进行监听</title>
      <link href="/posts/2586621136.html"/>
      <url>/posts/2586621136.html</url>
      
        <content type="html"><![CDATA[<h2 id="cobaltstrike-4-5-汉化版下载"><a href="#cobaltstrike-4-5-汉化版下载" class="headerlink" title="cobaltstrike_4.5 汉化版下载"></a>cobaltstrike_4.5 汉化版下载</h2><p>百度网盘链接：<a href="https://pan.baidu.com/s/17XNlDkZeahIBiGj2QzSJAQ?pwd=wq46">https://pan.baidu.com/s/17XNlDkZeahIBiGj2QzSJAQ?pwd=wq46</a><br>提取码：wq46</p><span id="more"></span><h2 id="cobaltstrike使用流程"><a href="#cobaltstrike使用流程" class="headerlink" title="cobaltstrike使用流程"></a>cobaltstrike使用流程</h2><p>1、首先下载压缩包并解压到随便一个文件夹。<br><img src="/posts/2586621136/0.png"><br><br></p><p>2、ls查看文件，并给cobaltstrike和teamserver执行权限。<br>（注：每一种所有对象都有三种权限：r:读、w:写、x:执行）<br>在赋予权限后ls查看文件可以看到cobaltstrike和teamserver的颜色由白色变到青色。<br><img src="/posts/2586621136/1.png"><br><br></p><p>3、输入如图指令运行团队服务器，红框中的是kali虚拟机上的ip地址，黄色涂鸦部分是你想要设置的团队服务器密码，留意端口号“54321”。<br><img src="/posts/2586621136/2.png"><br><br></p><p>4、在另外一个root命令框中输入 <code>./cobaltstrike</code> 以启动客户端。<br>输入第三步红框中的数据进行连接，这时候会出现指纹校验对话框，点击确定即可。<br><img src="/posts/2586621136/3.png"><br><br></p><p>5、如图所示打开监听器，并进行设置。<br><img src="/posts/2586621136/4.png"></p><p><img src="/posts/2586621136/5.png"><br><br></p><p>6、在菜单栏上选择攻击-生成后门-可执行程序，选择监视器后生成exe文件，将文件保存在自己好找的地方即可。<br><img src="/posts/2586621136/6.png"></p><p><img src="/posts/2586621136/7.png"></p><p><img src="/posts/2586621136/8.png"></p><p><img src="/posts/2586621136/9.png"><br><br></p><p>7、在实验的目标靶机上关闭实时保护，防止木马被杀掉。<br><img src="/posts/2586621136/10.png"></p><p>8、当靶机点击exe文件后，目标列表会新增一位。<br><img src="/posts/2586621136/11.png"></p><p>9、单击右键目标靶机，设置回连间隔为0，以实时查看kali对靶机的操作。<br><img src="/posts/2586621136/12.png"></p><p>10、以下是两个简单的操作。值得注意的是：在执行命令时，需要在命令前添加”shell”<br><img src="/posts/2586621136/13.png"><br><img src="/posts/2586621136/14.png"></p>]]></content>
      
      
      <categories>
          
          <category> web攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web攻防 </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window 2003搭建web服务器</title>
      <link href="/posts/3309922375.html"/>
      <url>/posts/3309922375.html</url>
      
        <content type="html"><![CDATA[<h2 id="window-server-2003-enterprise-edition下载"><a href="#window-server-2003-enterprise-edition下载" class="headerlink" title="window server 2003 enterprise edition下载"></a>window server 2003 enterprise edition下载</h2><p>百度网盘链接：<a href="https://pan.baidu.com/s/1R3Q-cf9n0t1MqKaF7WBWGA?pwd=5mia">https://pan.baidu.com/s/1R3Q-cf9n0t1MqKaF7WBWGA?pwd=5mia</a><br>提取码：5mia</p><span id="more"></span><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><p>1、用vmware创建虚拟机，没什么值得注意的地方，正常安装就行</p><p>2、安装好虚拟机后按步骤来<br><img src="/posts/3309922375/0.png"><br><img src="/posts/3309922375/1.png"><br><img src="/posts/3309922375/2.png"><br><img src="/posts/3309922375/3.png"><br><img src="/posts/3309922375/4.png"><br><img src="/posts/3309922375/5.png"><br><img src="/posts/3309922375/6.png"><br><img src="/posts/3309922375/7.png"><br><img src="/posts/3309922375/8.png"><br><br></p><p>3、创建一个文件夹以放置文件，路径就是文件夹的路径<br><img src="/posts/3309922375/9.png"><br><img src="/posts/3309922375/10.png"><br><img src="/posts/3309922375/11.png"><br><img src="/posts/3309922375/12.png"><br><br></p><p>4、打开test文件夹，创建一个index文本文件，随便输入并保存，记得把最后把后缀名改为html<br><img src="/posts/3309922375/16.png"><br><br></p><p>5、右键test，把权限打开，防止网站无法访问，如果还是无法访问，那么把IIS管理器内web服务扩展里的权限也打开<br><img src="/posts/3309922375/17.png"><br><br></p><p>6、可以看到网站已经可以打开了<br><img src="/posts/3309922375/18.png"><br><br></p><p>7、一般我们使用win2003是为了用源码搭建靶场的，如果有源码在手，我们可以在第三步时就将路径设为源码的文件夹（注意：不是下图这里更改，这里只是作演示）<br><img src="/posts/3309922375/19.png"><br><br></p><p>8、如果在访问网站时需要验证时,可以在用户组里创建一个用户以进行验证并访问网站(我已经验证过了所以没有弹出框可以截出来)<br><img src="/posts/3309922375/13.png"><br><img src="/posts/3309922375/14.png"><br><img src="/posts/3309922375/15.png"></p>]]></content>
      
      
      <categories>
          
          <category> web攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web攻防 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI模版注入</title>
      <link href="/posts/3320036978.html"/>
      <url>/posts/3320036978.html</url>
      
        <content type="html"><![CDATA[<h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>SSTI（Server-Side Template Injection）是一种发生在服务器端模板中的漏洞。当应用程序接受用户输入并将其直接传递到模板引擎中进行解析时，如果未对用户输入进行<strong>充分的验证和过滤</strong>，攻击者可以通过构造<strong>恶意的输入</strong>来注入模板代码，导致服务器端模板引擎执行恶意代码。</p><span id="more"></span><hr><p>下面将引用一个简单的例子来说明，假设有一个包含以下代码的Twig模板文件 <code>template.twig</code>：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">Hello, </span><span class="template-variable">&#123;&#123; <span class="name">name</span> &#125;&#125;</span><span class="language-xml">!</span></span><br></pre></td></tr></table></figure><p>在后端PHP代码中，可能会这样使用Twig引擎来渲染模板：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="type"></span>\Twig\Loader\FilesystemLoader(<span class="string">&#x27;/path/to/templates&#x27;</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="type"></span>\Twig\Environment(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]; <span class="comment">// 从用户输入获取name参数</span></span><br><span class="line">echo <span class="variable">$twig</span>-&gt;render(<span class="string">&#x27;template.twig&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$name</span>]);</span><br><span class="line"><span class="comment">//正确的代码应该在后面两段加上过滤和验证</span></span><br></pre></td></tr></table></figure><p>如果攻击者将name参数设置为恶意Twig模板代码，比如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="name">7</span> * <span class="number">7</span> &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>那么最终生成的模板内容将是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Hello</span>, <span class="number">49</span>!</span><br></pre></td></tr></table></figure><p>但是，如果攻击者将name参数设置为更危险的代码，比如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="name">_self.env.registerUndefinedFilterCallback</span>(<span class="name">&#x27;exec&#x27;</span>) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; <span class="name">filter</span>(<span class="name">&#x27;ls -la&#x27;</span>) &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这将导致Twig引擎执行系统命令 ls -la，可能导致服务器远程命令执行漏洞，造成严重安全问题。</p><br><h2 id="常见的模版"><a href="#常见的模版" class="headerlink" title="常见的模版"></a>常见的模版</h2><p><strong>PHP</strong><br>Twig、Smarty 、Blade﻿</p><p><strong>Python</strong><br>Jinja2、Tornado、Django、MaKo</p><p><strong>Java</strong><br>FreeMarker、Velocity</p><p><strong>更多模版参考</strong>：</p><p><img src="/posts/3320036978/0.png"></p><br><h2 id="python案例说明"><a href="#python案例说明" class="headerlink" title="python案例说明"></a>python案例说明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask    <span class="comment"># Jinja2是Flask框架的一部分，Jinja2会把模板参数提供的相应的值替换成 &#123;&#123;…&#125;&#125; 块</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;flag&#123;SSTI_123456&#125;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_not_found</span>(<span class="params">e</span>):</span><br><span class="line">    template = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;%% block body %%&#125;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;center-content error&quot;&gt;    # 这里是报错页面所显示的内容</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Oops! That page doesn&#x27;t exist.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;%s&lt;/h3&gt;    # %s接收404_url下的参数，返回到报错页面中</span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&#123;%% endblock %%&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> % (request.args.get(<span class="string">&#x27;404_url&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>随便输入字符使得页面报错，并利用404_url来接收参数，发现存在注入<br><img src="/posts/3320036978/1.png"></p><p>使用<strong>payload</strong>进行注入</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="variable">__import__</span>的os。</span><br><span class="line"><span class="string">&quot;&quot;</span>.<span class="variable">__class__</span>.<span class="variable">__bases__</span>[<span class="number">0</span>].<span class="variable">__subclasses__</span>()[<span class="number">75</span>].<span class="variable">__init__</span>.<span class="variable">__globals__</span>.<span class="variable">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p><img src="/posts/3320036978/2.png"></p><br><h2 id="CTF习题"><a href="#CTF习题" class="headerlink" title="CTF习题"></a>CTF习题</h2><p>1、这里看到flask框架及渲染，猜测是ssti注入<br><img src="/posts/3320036978/3.png"></p><p>2、在shrine路径下输入49验证<br><img src="/posts/3320036978/4.png"></p><p>3、由于safe_jinja函数对输入的参数进行了过滤，不能直接使用<code>&#123;&#123;config&#125;&#125;</code>，但这里可以使用python内置函数url_for 或 get_flashed_messages<br><img src="/posts/3320036978/5.png"></p><p>4、爆出current_app，由于flag存在app.config里<br>所以输入url_for.<strong>globals</strong>.current_app.config[‘FLAG’]，得到flag<br><img src="/posts/3320036978/6.png"></p><br><p>所以在开发Web应用程序时，始终要警惕并避免直接使用用户输入构造动态内容，尤其是在模板渲染过程中。对用户输入进行严格的验证和过滤，以及遵循最佳的安全实践，是保护系统免受SSTI等安全威胁的关键。</p>]]></content>
      
      
      <categories>
          
          <category> web攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web攻防 </tag>
            
            <tag> 注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next主题边框圆角化</title>
      <link href="/posts/47864.html"/>
      <url>/posts/47864.html</url>
      
        <content type="html"><![CDATA[<h1 id="next主题边框完全圆角化"><a href="#next主题边框完全圆角化" class="headerlink" title="next主题边框完全圆角化"></a>next主题边框完全圆角化</h1><p>问题描述：next主题边框圆角化后作者所属的边框有一层阴影，圆角化不明显</p><span id="more"></span><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>打开文件 “&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_variables&#x2F;Gemini.styl”，<br>在</p><pre><code>// Settings for some of the most global styles.// --------------------------------------------------// $body-bg-color           = #eee;$body-bg-color           = transparent;// Borders.// --------------------------------------------------$box-shadow-inner        = 0 2px 2px 0 rgba(0, 0, 0, .12), 0 3px 1px -2px rgba(0, 0, 0, .06), 0 1px 5px 0 rgba(0, 0, 0, .12);$box-shadow              = 0 2px 2px 0 rgba(0, 0, 0, .12), 0 3px 1px -2px rgba(0, 0,   0, .06), 0 1px 5px 0 rgba(0, 0, 0, .12), 0 -1px .5px 0 rgba(0, 0, 0, .09);</code></pre><p>中将 <code>$body-bg-color</code> 赋值为透明 transparent</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next主题顶部黑边处理</title>
      <link href="/posts/937.html"/>
      <url>/posts/937.html</url>
      
        <content type="html"><![CDATA[<h1 id="next主题顶部黑边处理"><a href="#next主题顶部黑边处理" class="headerlink" title="next主题顶部黑边处理"></a>next主题顶部黑边处理</h1><p>问题描述：next主题优化后仍然有一条黑边在顶部出现</p><span id="more"></span><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>打开文件 “themes\next\layout_layout.swig” ,在 </p><pre><code>&lt;body itemscope itemtype=&quot;http://schema.org/WebPage&quot;&gt;  &lt;div class=&quot;container&#123;%- if theme.motion.enable %&#125; use-motion&#123;%- endif %&#125;&quot;&gt;    &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code></pre><p>中删除 “<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>”</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>打开文件 “themes\next\source\css_variables\base.styl” ，<br>在</p><pre><code>// Headband// --------------------------------------------------$headband-height                = 3px;$headband-bg                    = $black-deep;</code></pre><p>中找到“<code>$headband-height</code>”，把3px改成0px；</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本语法</title>
      <link href="/posts/47caaf1e.html"/>
      <url>/posts/47caaf1e.html</url>
      
        <content type="html"><![CDATA[<h1 id="markdown基本语法说明"><a href="#markdown基本语法说明" class="headerlink" title="markdown基本语法说明"></a>markdown基本语法说明</h1><span id="more"></span><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在 Markdown 中，你可以通过在文字前面加上 # 来创建标题。# 的数量代表标题的级别。注意，#和标题之间要有一个空格 。例如：</p><p># 一级标题</p><p>## 二级标题</p><p>### 三级标题</p><p>#### 四级标题</p><p>##### 五级标题</p><p>###### 六级标题</p><h2 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h2><p>普通的文本会被转换为段落，段落之间通过一个或多个空白行来分隔。</p><p>如果你想要在不形成新段落的情况下进行换行（即在同一段落中换行），你可以在行尾添加两个或更多的空格然后回车。</p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>你可以使用星号 * 或下划线 _ 来强调文本：</p><p>斜体：<br>可以用一个 * 或 _ 包围文本来使其变为斜体。例如：<em>斜体</em> 或 _斜体_。</p><p>粗体：<br>可以用两个 ** 或 __ 包围文本来使其变为粗体。例如：<strong>粗体</strong> 或 __粗体__。</p><p>粗斜体：三个 *** 或 ___ 包围文本。例如：<em><strong>粗斜体</strong></em> 或 ___粗斜体___。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p><p>无序列表可以使用星号 *，加号 +，或是减号 - 作为列表标记。</p><ul><li>项目1</li><li>项目2</li><li>项目3</li></ul><p>有序列表直接使用数字接着一个英文句点 .。</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><p>链接使用 <code>[链接文本](URL)</code> 的格式。例如：<a href="https://cn.bing.com/">Bing</a></p><p>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code> 的格式。<br>例如：<img src="https://pic2.zhimg.com/v2-5fb13110e1de13d4c11e6e7f5b8026da_r.jpg" alt="这是一张图片" title="just a example"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>行内代码使用单个反引号 <code> 包围。例如：</code>代码&#96;。</p><p>代码块使用三个反引号`&#96;&#96;或四个空格缩进。例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个代码块</span><br></pre></td></tr></table></figure><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>你可以使用三个以上的星号 ***、减号 — 或下划线 ___ 来创建一个水平分割线。</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用使用 &gt; 符号。例如：</p><blockquote><p>这是一个引用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
